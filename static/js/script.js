// Generated by CoffeeScript 1.7.1
var Application, BezierCurve, BezierModule, Drawing, EventHandler, Example, Methodder, Node, ProjectView, RiffModule, RiffView, RigidCurve, Sound, SpeedModifier, Waveform,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Node = (function() {
  function Node(containerSelector, prefix) {
    this.containerSelector = containerSelector;
    this.$ = __bind(this.$, this);
    this.getChildren = __bind(this.getChildren, this);
    this.getChild = __bind(this.getChild, this);
    this.addChild = __bind(this.addChild, this);
    this.getActiveChild = __bind(this.getActiveChild, this);
    this.setActiveChild = __bind(this.setActiveChild, this);
    this.name = prefix + "-" + Math.floor(Math.random() * 0xFFFFFF).toString(16);
    this.children = {};
    this.activeChildName = null;
  }

  Node.prototype.setActiveChild = function(name) {
    if (name == null) {
      name = null;
    }
    if (this.activeChildName != null) {
      this.getActiveChild().$().removeClass("active");
    }
    if (name != null) {
      this.activeChildName = name;
      this.getActiveChild().$().addClass("active");
    } else {
      this.activeChildName = null;
    }
    return this.getActiveChild();
  };

  Node.prototype.getActiveChild = function() {
    if (this.activeChildName != null) {
      return this.children[this.activeChildName];
    } else {
      return null;
    }
  };

  Node.prototype.addChild = function(child) {
    this.children[child.name] = child;
    if (this.containerSelector != null) {
      $(this.containerSelector).append(child.getTemplate());
    }
    if (child.init != null) {
      child.init();
    }
    return this.setActiveChild(child.name);
  };

  Node.prototype.getChild = function(name) {
    return this.children[name];
  };

  Node.prototype.getChildren = function() {
    var child, children, name, _ref;
    children = [];
    _ref = this.children;
    for (name in _ref) {
      child = _ref[name];
      children.push(child);
    }
    return children;
  };

  Node.prototype.$ = function() {
    return $('#' + this.name);
  };

  return Node;

})();

ProjectView = (function(_super) {
  __extends(ProjectView, _super);

  function ProjectView(projectViewSelector, riffViewSelector) {
    this.projectViewSelector = projectViewSelector;
    this.riffViewSelector = riffViewSelector;
    this.closeRiff = __bind(this.closeRiff, this);
    this.getActiveRiff = __bind(this.getActiveRiff, this);
    this.playRiff = __bind(this.playRiff, this);
    this.openRiff = __bind(this.openRiff, this);
    this.newRiff = __bind(this.newRiff, this);
    ProjectView.__super__.constructor.call(this, this.projectViewSelector, "Proj-View");
    this.newRiff();
  }

  ProjectView.prototype.newRiff = function() {
    var riff;
    return riff = this.addChild(new RiffView(this.riffViewSelector));
  };

  ProjectView.prototype.openRiff = function(name) {
    this.setActiveChild(name);
    $("#RiffView .header .title").text(name);
    $("#RiffView").removeClass("hidden");
    return this.getChild(name).openRiff();
  };

  ProjectView.prototype.playRiff = function(name) {
    return this.getChild(name).playRiff();
  };

  ProjectView.prototype.getActiveRiff = function() {
    return this.getActiveChild();
  };

  ProjectView.prototype.closeRiff = function() {
    this.getActiveChild().closeRiff();
    $("#RiffView .header .title").text("");
    $("#RiffView").addClass("hidden");
    return this.setActiveChild(null);
  };

  return ProjectView;

})(Node);

Application = (function() {
  function Application() {
    this.projectViewSelector = "#ProjectView>.container";
    this.riffViewSelector = "#RiffView>.container";
    this.project = new ProjectView(this.projectViewSelector, this.riffViewSelector);
  }

  return Application;

})();

EventHandler = (function() {
  function EventHandler(app) {
    this.app = app;
    this.setModuleEditingTool = __bind(this.setModuleEditingTool, this);
    this.editModule = __bind(this.editModule, this);
    this.closeRiff = __bind(this.closeRiff, this);
    this.playRiff = __bind(this.playRiff, this);
    this.openRiff = __bind(this.openRiff, this);
    this.newRiff = __bind(this.newRiff, this);
  }

  EventHandler.prototype.newRiff = function() {
    return this.app.project.newRiff();
  };

  EventHandler.prototype.openRiff = function(name) {
    return this.app.project.openRiff(name);
  };

  EventHandler.prototype.playRiff = function(name) {
    return this.app.project.playRiff(name);
  };

  EventHandler.prototype.closeRiff = function() {
    return this.app.project.closeRiff();
  };

  EventHandler.prototype.editModule = function(name) {
    return this.app.project.getActiveRiff().editModule(name);
  };

  EventHandler.prototype.setModuleEditingTool = function(name, editingTool) {
    return this.app.project.getActiveRiff().getModule(name).setEditingTool(editingTool);
  };

  return EventHandler;

})();

window.app = null;

window.evt = null;

window.modules = {};

window.tool = {};

$(document).on("ready", function(e) {
  var template, _i, _len, _ref;
  _ref = $(".ichTemplate");
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    template = _ref[_i];
    console.log(template.id);
    ich.addTemplate(template.id, template.innerHTML);
    template.remove();
  }
  window.app = new Application();
  return window.evt = new EventHandler(window.app);
});

RiffModule = (function(_super) {
  __extends(RiffModule, _super);

  function RiffModule(prefix, options) {
    this.options = options;
    this.editModule = __bind(this.editModule, this);
    this.init = __bind(this.init, this);
    this.getTemplate = __bind(this.getTemplate, this);
    RiffModule.__super__.constructor.call(this, "", prefix);
    this.paper = new paper.PaperScope();
    this.data = {};
  }

  RiffModule.prototype.getTemplate = function() {
    return ich.RiffModule({
      moduleName: this.name
    });
  };

  RiffModule.prototype.init = function() {
    var canvas, tool, _i, _len, _ref;
    canvas = this.$().find("canvas")[0];
    this.paper.setup(canvas);
    console.log(canvas);
    if (this.tools != null) {
      _ref = this.tools;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tool = _ref[_i];
        this.$().find(".tools").append(ich.Button({
          onclick: "evt.setModuleEditingTool('" + this.name + "','" + tool + "')",
          sprite: window.tool[tool].sprite
        }));
      }
    }
    return this.initModule();
  };

  RiffModule.prototype.editModule = function() {
    var resizer;
    this.$().toggleClass("under-construction");
    resizer = function() {
      var newViewSize, oldViewSize;
      oldViewSize = this.paper.view.viewSize.clone();
      newViewSize = new this.paper.Size(this.$().find("canvas").width(), this.$().find("canvas").height());
      this.paper.project.activeLayer.scale(newViewSize.width / oldViewSize.width, newViewSize.height / oldViewSize.height, new this.paper.Point(0, 0));
      this.paper.view.viewSize = newViewSize;
      return this.paper.view.draw();
    };
    return setTimeout(new Methodder(resizer, this), 400);
  };

  return RiffModule;

})(Node);

BezierModule = (function(_super) {
  __extends(BezierModule, _super);

  function BezierModule(prefix, options) {
    if (options == null) {
      options = {};
    }
    this.initModule = __bind(this.initModule, this);
    this.getYOnPath = __bind(this.getYOnPath, this);
    this.getPath = __bind(this.getPath, this);
    this.setEditingTool = __bind(this.setEditingTool, this);
    BezierModule.__super__.constructor.call(this, prefix, options);
    this.path = null;
    this.Xaxis = null;
    this.tool = "Pencil";
    this.tools = ["Pen", "Pencil", "BezierDebugger"];
  }

  BezierModule.prototype.setEditingTool = function(toolName) {
    var method, name, _ref, _ref1;
    console.log(this.name, toolName);
    _ref = window.tool[this.tool].events;
    for (name in _ref) {
      method = _ref[name];
      this.paper.tool[name] = void 0;
    }
    _ref1 = window.tool[toolName].events;
    for (name in _ref1) {
      method = _ref1[name];
      this.paper.tool[name] = new Methodder(method, this);
    }
    if (window.tool[toolName].init != null) {
      window.tool[toolName].init.call(this);
    }
    return this.tool = toolName;
  };

  BezierModule.prototype.getPath = function() {
    return this.path;
  };

  BezierModule.prototype.getYOnPath = function(x) {
    var intersections;
    if (this.Xaxis === null) {
      this.Xaxis = new this.paper.Path.Line({
        from: [0, 0],
        to: [0, this.paper.view.viewSize.height]
      });
    }
    this.Xaxis.position.x = x;
    intersections = this.path.getIntersections(this.Xaxis);
    if (intersections.length !== 0) {
      return intersections[0].point.y;
    } else {
      return null;
    }
  };

  BezierModule.prototype.initModule = function() {
    var textItem;
    this.Xaxis = new this.paper.Path.Line({
      from: [0, 0],
      to: [0, this.paper.view.viewSize.height]
    });
    textItem = new this.paper.PointText({
      content: this.name,
      point: new this.paper.Point(20, 30),
      fillColor: 'black'
    });
    return this.setEditingTool(this.tool);
  };

  return BezierModule;

})(RiffModule);

Drawing = (function(_super) {
  __extends(Drawing, _super);

  function Drawing() {
    Drawing.__super__.constructor.call(this, "Drawing");
  }

  return Drawing;

})(BezierModule);

Waveform = (function(_super) {
  __extends(Waveform, _super);

  function Waveform() {
    this.getRiffData = __bind(this.getRiffData, this);
    this.changed = __bind(this.changed, this);
    this.getRigidData = __bind(this.getRigidData, this);
    Waveform.__super__.constructor.call(this, "Waveform");
    this.rigidCurve = null;
  }

  Waveform.prototype.getRigidData = function(samples) {
    if (this.rigidCurve == null) {
      this.changed();
    }
    return this.rigidCurve.getData(samples);
  };

  Waveform.prototype.changed = function() {
    var points, x, _i, _ref;
    points = [];
    for (x = _i = 0, _ref = this.paper.view.viewSize.width; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
      points.push([x, this.getYOnPath(x)]);
    }
    return this.rigidCurve = new RigidCurve(this.paper.view, points);
  };

  Waveform.prototype.getRiffData = function(samples) {
    var big, data, heightRatio, i, little, range, x, _i, _ref;
    this.getRigidData(samples);
    little = this.path.firstSegment.point.x;
    big = this.path.lastSegment.point.x;
    range = big;
    if (little > big) {
      big = little;
      little = range;
      range = big;
    }
    range -= little;
    i = 0;
    data = [];
    heightRatio = 255 / this.paper.view.size.height;
    for (x = _i = little, _ref = range / samples; _ref > 0 ? _i <= big : _i >= big; x = _i += _ref) {
      data[i] = this.getYOnPath(x) * heightRatio;
      i++;
    }
    return data;
  };

  return Waveform;

})(BezierModule);

SpeedModifier = (function(_super) {
  __extends(SpeedModifier, _super);

  function SpeedModifier(options) {
    var _base, _base1, _base2, _base3, _base4;
    this.options = options != null ? options : {};
    this.mod = __bind(this.mod, this);
    this.getStep = __bind(this.getStep, this);
    this.heightToHz = __bind(this.heightToHz, this);
    if ((_base = this.options).length == null) {
      _base.length = 1;
    }
    if ((_base1 = this.options).lowerBounds == null) {
      _base1.lowerBounds = .1;
    }
    if ((_base2 = this.options).upperBounds == null) {
      _base2.upperBounds = 2;
    }
    if ((_base3 = this.options).rate == null) {
      _base3.rate = 8000;
    }
    if ((_base4 = this.options).hz == null) {
      _base4.hz = 80;
    }
    this.heightRange = this.options.upperBounds - this.options.lowerBounds;
    SpeedModifier.__super__.constructor.call(this, "SpeedMod", this.options);
  }

  SpeedModifier.prototype.heightToHz = function(h) {
    return this.options.hz * (((this.paper.view.size.height - h) / this.paper.view.size.height) * this.heightRange + this.options.lowerBounds);
  };

  SpeedModifier.prototype.getStep = function(x) {
    var result;
    result = {};
    result.step = this.getYOnPath(x);
    if (result.step != null) {
      result.step = this.heightToHz(result.step);
    } else {
      result.step = this.options.hz;
    }
    result.hz = result.step;
    result.samples = this.options.rate / result.hz;
    result.step = this.paper.view.size.width / this.options.length / result.step;
    return result;
  };

  SpeedModifier.prototype.mod = function(sound) {
    var data, i, result, step, _i, _ref;
    console.log("Modding");
    data = [];
    step = this.getStep(0).step;
    for (i = _i = 0, _ref = this.paper.view.size.width; step > 0 ? _i <= _ref : _i >= _ref; i = _i += step) {
      result = this.getStep(i);
      data = data.concat(sound.getRiffData(result.samples));
      step = result.step;
    }
    console.log(data.length);
    return data;
  };

  return SpeedModifier;

})(BezierModule);

RiffView = (function(_super) {
  __extends(RiffView, _super);

  function RiffView(riffViewSelector) {
    this.riffViewSelector = riffViewSelector;
    this.getTemplate = __bind(this.getTemplate, this);
    this.closeRiff = __bind(this.closeRiff, this);
    this.playRiff = __bind(this.playRiff, this);
    this.openRiff = __bind(this.openRiff, this);
    this.getActiveModule = __bind(this.getActiveModule, this);
    this.editModule = __bind(this.editModule, this);
    this.getModule = __bind(this.getModule, this);
    this.getModules = __bind(this.getModules, this);
    this.init = __bind(this.init, this);
    RiffView.__super__.constructor.call(this, this.riffViewSelector, "RiffViewOpen");
    this.options = {};
  }

  RiffView.prototype.init = function() {
    this.options = {
      length: this.$().find(".length").val(),
      hz: this.$().find(".hz").val(),
      rate: this.$().find(".rate").val()
    };
    this.addChild(new Waveform());
    this.addChild(new SpeedModifier(this.options));
    return this.openRiff();
  };

  RiffView.prototype.getModules = function() {
    return this.getChildren();
  };

  RiffView.prototype.getModule = function(name) {
    return this.getChild(name);
  };

  RiffView.prototype.editModule = function(name) {
    this.setActiveChild(name);
    return this.getChild(name).editModule();
  };

  RiffView.prototype.getActiveModule = function() {
    return this.getActiveChild();
  };

  RiffView.prototype.openRiff = function() {
    var module, _i, _len, _ref, _results;
    this.closeRiff();
    _ref = this.getModules();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      module = _ref[_i];
      _results.push(module.$().show());
    }
    return _results;
  };

  RiffView.prototype.playRiff = function() {
    var data, data_, mod, modifiers, module, start, wave, waveform, workingData, _i, _j, _k, _l, _len, _len1, _ref, _ref1, _ref2;
    start = (new Date()).getTime();
    this.options.length = this.$().find(".length").val();
    this.options.hz = this.$().find(".hz").val();
    this.options.rate = this.$().find(".rate").val();
    console.log(this.options);
    waveform = null;
    modifiers = [];
    _ref = this.getModules();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      module = _ref[_i];
      if (module.getRiffData != null) {
        waveform = module;
      } else {
        modifiers.push(module);
      }
    }
    if (waveform != null) {
      data = null;
      if (modifiers.length !== 0) {
        workingData = new Sound(waveform);
        for (_j = 0, _len1 = modifiers.length; _j < _len1; _j++) {
          mod = modifiers[_j];
          workingData = mod.mod(workingData);
        }
        data = workingData;
      } else {
        data = waveform.getRiffData(this.options.rate);
        if (data != null) {
          data_ = [];
          for (_k = 1, _ref1 = this.options.hz; 1 <= _ref1 ? _k <= _ref1 : _k >= _ref1; 1 <= _ref1 ? _k++ : _k--) {
            data_.concat(data);
          }
          data = [];
          for (_l = 1, _ref2 = this.options.length; 1 <= _ref2 ? _l <= _ref2 : _l >= _ref2; 1 <= _ref2 ? _l++ : _l--) {
            data.concat(data_);
          }
        }
      }
      if (data != null) {
        window.audio = new Audio();
        wave = new RIFFWAVE();
        wave.header.sampleRate = this.options.rate;
        wave.Make(data);
        window.audio.src = wave.dataURI;
        console.log(((new Date()).getTime() - start) / 1000);
        return window.audio.play();
      }
    }
  };

  RiffView.prototype.closeRiff = function() {
    return $(this.riffViewSelector).children().hide();
  };

  RiffView.prototype.getTemplate = function() {
    return ich.RiffViewOpen({
      riffName: this.name
    });
  };

  return RiffView;

})(Node);

Example = (function(_super) {
  __extends(Example, _super);

  function Example() {
    Example.__super__.constructor.call(this, "Example");
  }

  Example.prototype.init = function() {
    var path, rect, start;
    path = new this.Path();
    path.strokeColor = 'black';
    start = new this.Point(100, 100);
    path.moveTo(start);
    path.lineTo(start.add([200, -50]));
    this.view.draw();
    rect = new this.Path.Rectangle([100, 50], [10, 100]);
    rect.strokeColor = 'black';
    return this.view.onFrame = function(event) {
      return rect.rotate(3);
    };
  };

  return Example;

})(RiffModule);

window.tool.BezierDebugger = {
  name: "BezierDebugger",
  sprite: "edit-points_png",
  data: {},
  init: function() {
    return this.data.guide = new this.paper.Path.Line({
      from: [0, 0],
      to: [0, this.paper.view.viewSize.height],
      strokeColor: 'yellow'
    });
  },
  events: {
    onMouseMove: function(event) {
      var inter, intersections, mb, _i, _len, _results;
      this.data.guide.position.x = event.point.x;
      if (this.path != null) {
        intersections = this.data.guide.getIntersections(this.path);
        _results = [];
        for (_i = 0, _len = intersections.length; _i < _len; _i++) {
          inter = intersections[_i];
          mb = this.rigidCurve.getMB(inter.point.x);
          _results.push(new this.paper.Path.Line({
            from: [inter.point.x + 100, mb.m * (inter.point.x + 100) + mb.b],
            to: [inter.point.x - 100, mb.m * (inter.point.x - 100) + mb.b],
            strokeColor: 'black'
          }).removeOnMove());
        }
        return _results;
      }
    },
    onMouseDown: function(event) {
      var inter, intersections, mb, _i, _len, _results;
      if (this.path != null) {
        intersections = this.data.guide.getIntersections(this.path);
        _results = [];
        for (_i = 0, _len = intersections.length; _i < _len; _i++) {
          inter = intersections[_i];
          mb = this.rigidCurve.getMB(inter.point.x);
          _results.push(console.log(mb));
        }
        return _results;
      }
    }
  }
};

window.tool.Pen = {
  name: "Pen",
  sprite: "pen_png",
  data: {},
  events: {
    onMouseDown: function(event) {
      var hitOptions, hitResult, location;
      hitOptions = {
        segments: true,
        handles: true,
        stroke: true,
        fill: true,
        tolerance: 5,
        selected: true
      };
      hitResult = this.paper.project.hitTest(event.point, hitOptions);
      this.data.segment = this.data.path = this.data.handle = null;
      if (event.modifiers.shift) {
        if (hitResult.type === 'segment') {
          hitResult.segment.remove();
        }
        return;
      }
      if (hitResult) {
        this.data.path = hitResult.item;
        if (hitResult.type === 'segment') {
          this.data.segment = hitResult.segment;
        } else if (hitResult.type === 'stroke') {
          location = hitResult.location;
          this.data.segment = this.data.path.insert(location.index + 1, event.point);
          this.data.path.smooth();
        } else if (hitResult.type === 'handle-in') {
          this.data.handle = hitResult.segment.handleIn;
        } else if (hitResult.type === 'handle-out') {
          this.data.handle = hitResult.segment.handleOut;
        }
      }
      this.data.movePath = hitResult.type === 'fill';
      if (this.data.movePath) {
        this.paper.project.activeLayer.addChild(hitResult.item);
        return this.data.path.fullySelected = true;
      }
    },
    onMouseDrag: function(event) {
      if (this.data.segment) {
        this.data.segment.point = event.point;
        this.data.path.smooth();
        if (this.data.handle) {
          this.data.handle.x += event.delta.x;
          this.data.handle.y += event.delta.y;
        }
      }
      if (this.data.movePath) {
        return this.data.path.position += event.delta;
      }
    },
    onMouseUp: function(event) {
      if (this.data.segment || this.data.movePath) {
        return this.changed();
      }
    }
  }
};

window.tool.Pencil = {
  name: "Pencil",
  sprite: "pencil_png",
  data: {},
  init: function() {
    return this.data.guide = new this.paper.Path.Line({
      from: [0, 0],
      to: [0, this.paper.view.viewSize.height],
      strokeColor: 'yellow'
    });
  },
  events: {
    onMouseDown: function(event) {
      if (this.path) {
        this.path.remove();
      }
      return this.path = new this.paper.Path({
        segments: [event.point],
        strokeColor: 'black',
        fullySelected: true
      });
    },
    onMouseDrag: function(event) {
      return this.path.add(event.point);
    },
    onMouseUp: function(event) {
      this.path.simplify(10);
      this.path.fullySelected = true;
      return this.changed();
    },
    onMouseMove: function(event) {
      var inter, intersections, _i, _len, _results;
      this.data.guide.position.x = event.point.x;
      if (this.path != null) {
        intersections = this.data.guide.getIntersections(this.path);
        _results = [];
        for (_i = 0, _len = intersections.length; _i < _len; _i++) {
          inter = intersections[_i];
          _results.push(new this.paper.Path.Circle({
            center: inter.point,
            radius: 5,
            fillColor: '#009dec'
          }).removeOnMove());
        }
        return _results;
      }
    }
  }
};

BezierCurve = (function() {
  function BezierCurve(module, pt) {
    this.module = module;
    this.pt = pt;
  }

  return BezierCurve;

})();

Methodder = (function() {
  function Methodder(method, scope) {
    return function(args) {
      return method.call(scope, args);
    };
  }

  return Methodder;

})();

RigidCurve = (function() {
  function RigidCurve(view, points) {
    this.getData = __bind(this.getData, this);
    this.getY = __bind(this.getY, this);
    this.getMB = __bind(this.getMB, this);
    var p1, p2, point, slope, x1, x2, y1, y2, _i, _len;
    this.m = [];
    this.b = [];
    this.yScale = 255 / view.viewSize.height;
    p1 = null;
    p2 = null;
    for (_i = 0, _len = points.length; _i < _len; _i++) {
      point = points[_i];
      p1 = point;
      if (p2 != null) {
        x1 = p1[0];
        x2 = p2[0];
        y1 = p1[1];
        y2 = p2[1];
        slope = this.yScale * (y1 - y2) / (x1 - x2);
        this.m.push(slope);
        this.b.push(-slope * x1 + this.yScale * y1);
      }
      p2 = p1;
    }
  }

  RigidCurve.prototype.getMB = function(x) {
    var iX;
    iX = x & 1023;
    return {
      m: this.m[iX] / this.yScale,
      b: this.b[iX] / this.yScale
    };
  };

  RigidCurve.prototype.getY = function(x) {
    var iX;
    iX = x & 1023;
    return this.m[iX] * x + this.b[iX];
  };

  RigidCurve.prototype.getData = function(nsamples) {
    var data, dx, iX, x, _i, _ref;
    dx = this.m.length / nsamples;
    data = [];
    for (x = _i = 0, _ref = this.m.length; dx > 0 ? _i <= _ref : _i >= _ref; x = _i += dx) {
      iX = x & 1023;
      data.push(this.m[iX] * x + this.b[iX]);
    }
    return data;
  };

  return RigidCurve;

})();

Sound = (function() {
  function Sound(waveform) {
    this.getRiffData = waveform.getRiffData;
  }

  return Sound;

})();
